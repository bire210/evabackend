Create an index on the user_id field in the purchases collection to improve the performance of your queries.

db.Purchases.createIndex({user_is:1})


Use the $lookup operator in an aggregation pipeline to join the users and purchases collections, and return a new documents that contains the name and age of each user, along with their purchases


db.users.aggregate([{$lookup:{from:"Purchases",localField:"_id",foreignField:"user_id",as:"purchase"}},{$project:{"purchase.user_id":0}}])



Use the $group operator in an aggregation pipeline to calculate the total number of purchases and total spending for each user. The output should look like this:


db.users.aggregate([{$lookup:{from:"Purchases",localField:"_id",foreignField:"user_id",as:"purchase"}},{$project:{"purchase.user_id":0}},{$group:{_id:{_id:"$_id",name:"$name","total_spending":{$sum:"$purchase.price"}}}}])


Use the $sort operator to sort the output documents by total spending in descending order. The output should look like this:



db.users.aggregate([{$lookup:{from:"Purchases",localField:"_id",foreignField:"user_id",as:"purchase"}},{$project:{"purchase.user_id":0}},{$group:{_id:{_id:"$_id",name:"$name","total_spending":{$sum:"$purchase.price"}}}},{$sort:{"_id.total_spending":-1}}])